// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Position {
  id        String   @id @db.VarChar(5)
  name      String   @db.VarChar(25)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[]

  @@map("positions")
}

model Department {
  id        String   @id @db.VarChar(5)
  name      String   @db.VarChar(50)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[]

  @@map("departments")
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique @db.VarChar(25)
  users User[]

  @@map("roles")
}

model User {
  id           Int      @id @default(autoincrement())
  nik          String   @unique @db.VarChar(8)
  name         String   @db.VarChar(50)
  email        String   @unique @db.VarChar(50)
  phone        String?  @unique @db.VarChar(13)
  image        String?
  password     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  roleId       Int
  positionId   String?
  departmentId String?

  role                    Role                      @relation(fields: [roleId], references: [id])
  position                Position?                 @relation(fields: [positionId], references: [id])
  department              Department?               @relation(fields: [departmentId], references: [id])
  equipments              Equipment[]
  functionalLocations     FunctionalLocation[]
  files                   File[]
  findings                Finding[]
  equipmentInspectionForm EquipmentInspectionForm[]

  @@index([nik, name, email])
  @@map("users")
}

model FunctionalLocation {
  id          String      @id @db.VarChar(100)
  description String      @db.VarChar(100)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  equipments  Equipment[]
  userId      Int?

  user     User?     @relation(fields: [userId], references: [id])
  findings Finding[]

  @@index([id, description])
  @@map("functional_locations")
}

model Classification {
  id          Int      @id @default(autoincrement())
  description String   @db.VarChar(50)
  type        String   @unique @db.VarChar(25)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  equipments Equipment[]

  @@map("classifications")
}

model EquipmentStatus {
  id          Int    @id @default(autoincrement())
  description String @db.VarChar(50)

  equipments Equipment[]

  @@map("equipment_statuses")
}

model Equipment {
  id                   String   @id @db.Char(9)
  classificationId     Int
  equipmentStatusId    Int
  functionalLocationId String?
  sortField            String   @db.VarChar(50)
  description          String   @db.VarChar(100)
  userId               Int?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  equipmentMaterials EquipmentMaterial[]
  user               User?               @relation(fields: [userId], references: [id])
  equipmentStatus    EquipmentStatus     @relation(fields: [equipmentStatusId], references: [id])
  functionalLocation FunctionalLocation? @relation(fields: [functionalLocationId], references: [id])
  classification     Classification      @relation(fields: [classificationId], references: [id])
  equipmentFiles     EquipmentFile[]
  findings           Finding[]
  equipmentImages    EquipmentImage[]

  @@index([id, sortField, description])
  @@map("equipments")
}

model EquipmentMaterial {
  equipmentId String
  materialId  String
  quantity    Int
  equipment   Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  material    Material  @relation(fields: [materialId], references: [id], onDelete: Cascade)

  @@id([equipmentId, materialId])
  @@map("equipment_material")
}

model Unit {
  id          Int      @id @default(autoincrement())
  description String   @unique @db.VarChar(50)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  materials Material[]

  @@map("units")
}

model Material {
  id                 String              @id @db.Char(8)
  name               String
  price              Int                 @default(0)
  equipmentMaterials EquipmentMaterial[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  unitId             Int?

  unit Unit? @relation(fields: [unitId], references: [id], onDelete: SetNull)

  @@index([id, name])
  @@map("materials")
}

model File {
  id             String          @id @default(uuid())
  name           String          @unique
  tags           String?
  type           String
  path           String
  userId         Int?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  user           User?           @relation(fields: [userId], references: [id])
  equipmentFiles EquipmentFile[]

  @@index([name, tags])
  @@map("files")
}

model EquipmentFile {
  equipmentId String
  fileId      String
  equipment   Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  file        File      @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@id([equipmentId, fileId])
  @@map("equipment_file")
}

model FindingStatus {
  id          Int       @id @default(autoincrement())
  description String    @unique @db.VarChar(50)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  finding     Finding[]

  @@map("finding_statuses")
}

model Finding {
  id                   String   @id @default(uuid())
  description          String
  notification         String?  @db.Char(8)
  equipmentId          String?
  functionalLocationId String?
  userId               Int?
  findingStatusId      Int
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  equipment          Equipment?          @relation(fields: [equipmentId], references: [id])
  functionalLocation FunctionalLocation? @relation(fields: [functionalLocationId], references: [id])
  user               User?               @relation(fields: [userId], references: [id])
  findingImages      FindingImage[]
  findingStatus      FindingStatus       @relation(fields: [findingStatusId], references: [id])

  @@index([description, notification, equipmentId, functionalLocationId])
  @@map("findings")
}

model FindingImage {
  id          String      @id @default(uuid())
  findingId   String
  path        String
  imageStatus ImageStatus @default(Before)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  finding Finding @relation(fields: [findingId], references: [id])

  @@map("finding_images")
}

enum ImageStatus {
  Before
  After
}

model EquipmentInspectionForm {
  id           Int      @id @default(autoincrement())
  equipmentId  String   @db.Char(9)
  formableId   Int
  formableType String
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("equipment_inspection_forms")
}

model MotorInspection {
  id               Int      @id @default(autoincrement())
  isOperated       Boolean
  isClean          Boolean
  numberOfGreasing Int?
  temperatureDe    Decimal? @db.Decimal(5, 2)
  temperatureBody  Decimal? @db.Decimal(5, 2)
  temperatureNde   Decimal? @db.Decimal(5, 2)
  vibrationDev     Decimal? @db.Decimal(4, 2)
  vibrationDeh     Decimal? @db.Decimal(4, 2)
  vibrationDea     Decimal? @db.Decimal(4, 2)
  vibrationDef     Decimal? @db.Decimal(4, 2)
  isNoisyDe        Boolean
  vibrationNdev    Decimal? @db.Decimal(4, 2)
  vibrationNdeh    Decimal? @db.Decimal(4, 2)
  vibrationNdef    Decimal? @db.Decimal(4, 2)
  isNoisyNde       Boolean
  note             String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("motor_inspections")
}

model PanelInspection {
  id                   Int      @id @default(autoincrement())
  isOperated           Boolean
  isClean              Boolean
  isLabelOk            Boolean
  isIndicatorOk        Boolean
  temperatureIncomingR Decimal? @db.Decimal(5, 2)
  temperatureIncomingS Decimal? @db.Decimal(5, 2)
  temperatureIncomingT Decimal? @db.Decimal(5, 2)
  temperatureCabinet   Decimal? @db.Decimal(5, 2)
  temperatureOutgoingR Decimal? @db.Decimal(5, 2)
  temperatureOutgoingS Decimal? @db.Decimal(5, 2)
  temperatureOutgoingT Decimal? @db.Decimal(5, 2)
  currentR             Decimal? @db.Decimal(6, 2)
  currentS             Decimal? @db.Decimal(6, 2)
  currentT             Decimal? @db.Decimal(6, 2)
  isNoisy              Boolean
  note                 String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@map("panel_inspections")
}

model Image {
  id              String           @id @default(uuid())
  path            String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  equipmentImages EquipmentImage[]

  @@map("images")
}

model EquipmentImage {
  equipmentId String
  imageId     String
  equipment   Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  image       Image     @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@id([equipmentId, imageId])
  @@map("equipment_image")
}
