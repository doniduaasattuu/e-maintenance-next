// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]

  @@map("roles")
}

model User {
  id        Int      @id @default(autoincrement())
  nik       String   @unique
  name      String
  email     String   @unique
  image     String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roleId    Int

  role                Role                 @relation(fields: [roleId], references: [id])
  equipments          Equipment[]
  functionalLocations FunctionalLocation[]

  @@map("users")
}

model FunctionalLocation {
  id          String      @id @db.VarChar(100)
  description String      @db.VarChar(100)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  equipments  Equipment[]
  userId      Int?

  user User? @relation(fields: [userId], references: [id])

  @@map("functional_locations")
}

model Classification {
  id          Int      @id @default(autoincrement())
  description String   @db.VarChar(50)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  equipments Equipment[]

  @@map("classifications")
}

model EquipmentStatus {
  id          Int    @id @default(autoincrement())
  description String @db.VarChar(50)

  equipments Equipment[]

  @@map("equipment_statuses")
}

model Equipment {
  id                   String   @id @db.Char(9)
  classificationId     Int
  functionalLocationId String?
  equipmentStatusId    Int
  sortField            String   @db.VarChar(50)
  description          String   @db.VarChar(100)
  userId               Int?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user               User?               @relation(fields: [userId], references: [id])
  equipmentStatus    EquipmentStatus     @relation(fields: [equipmentStatusId], references: [id])
  functionalLocation FunctionalLocation? @relation(fields: [functionalLocationId], references: [id])
  classification     Classification      @relation(fields: [classificationId], references: [id])

  @@index([sortField])
  @@map("equipments")
}
